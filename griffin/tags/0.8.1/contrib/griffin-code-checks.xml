<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.2//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_2.dtd">

<!-- $Id: tent_checks.xml,v 1.30 2006/09/21 06:16:43 gklo Exp $ -->

<!--
  Checkstyle configuration that checks the sun coding conventions from:

    - the Java Language Specification at
      http://java.sun.com/docs/books/jls/second_edition/html/index.html

    - the Sun Code Conventions at http://java.sun.com/docs/codeconv/

    - the Javadoc guidelines at
      http://java.sun.com/j2se/javadoc/writingdoccomments/index.html

    - the JDK Api documentation http://java.sun.com/j2se/docs/api/index.html

    - some best practices

  Checkstyle is very configurable. Be sure to read the documentation at
  http://checkstyle.sf.net (or in your downloaded distribution).
-->

<module name="Checker">

    <!-- Checks that a package.html file exists for each package.     -->
    <!-- See http://checkstyle.sf.net/config_javadoc.html#PackageHtml -->
    <!-- <module name="PackageHtml"/> -->

    <!-- Checks whether files end with a new line.                        -->
    <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
    <module name="NewlineAtEndOfFile"/>

    <!-- Checks that property files contain the same keys.         -->
    <!-- See http://checkstyle.sf.net/config_misc.html#Translation -->
    <module name="Translation"/>


    <module name="TreeWalker">

        <!-- Checks for Javadoc comments.                     -->
        <!-- See http://checkstyle.sf.net/config_javadoc.html -->
<!--
        <module name="JavadocVariable"/>
        <module name="JavadocStyle"/>
-->
        <module name="JavadocType">
            <property name="scope" value="private"/>
            <property name="authorFormat" value="[A-Z][\-\p{L}]*\s+[\p{L}\.\s]*[A-Z][\-\p{L}]*"/>
            <property name="versionFormat" value="\$Revision.*\$"/>
        </module>
        
        <module name="JavadocMethod">
            <property name="scope" value="public"/>
            <property name="allowUndeclaredRTE" value="true"/>
        </module>


        <!-- Checks for Naming Conventions.                  -->
        <!-- See http://checkstyle.sf.net/config_naming.html -->

        <module name="ConstantName"/>
        <module name="LocalFinalVariableName">
            <property name="format" value="^_?[a-z][a-zA-Z0-9]*$"/>
            <property name="tokens" value="PARAMETER_DEF"/>
        </module>
                                
        <module name="LocalVariableName">
            <property name="format" value="^_?[a-z][a-zA-Z0-9]*$"/>
            <property name="tokens" value="PARAMETER_DEF"/>
        </module>
                
        <module name="MemberName"/>
<!--        <module name="MethodName"/> -->
        <module name="PackageName"/>
        <module name="ParameterName"/>
        <module name="StaticVariableName"/>
        <module name="TypeName"/>


        <!-- Checks for Headers                                -->
        <!-- See http://checkstyle.sf.net/config_header.html   -->
         <!--  <property                                             
                 name="headerFile"                                  
                 value="${basedir}/contrib/java.header"/>                  
  -->

       <!-- <module name="Header"> -->                          
            <!-- The follow property value demonstrates the ability     -->
            <!-- to have access to ANT properties. In this case it uses -->
            <!-- the ${basedir} property to allow Checkstyle to be run  -->
            <!-- from any directory within a project. See property      -->
            <!-- expansion,                                             -->
            <!-- http://checkstyle.sf.net/config.html#properties        -->
        <!-- </module> -->

        <!-- Following interprets the header file as regular expressions. -->
<!--
        <module name="RegexpHeader">
            <property name="headerFile" value="${basedir}/contrib/java.header"/>
            <property name="multiLines" value="7"/>
        </module>
-->
        <!-- Checks for imports                              -->
        <!-- See http://checkstyle.sf.net/config_import.html -->
        <module name="AvoidStarImport"/>
        <module name="IllegalImport"/> <!-- defaults to sun.* packages -->
        <module name="RedundantImport"/>
        <module name="UnusedImports"/>

<!--
        <module name="ImportOrder">
            <property name="groups" value="java,java.beans,java.awt,javax,junit,org.omg,org.apache,org.globus,org,com,com.sshtools,de.gmd.tent,de.gmd.TentComponent,de.gmd.TentData,de.gmd.TentLog,de.gmd.TentNaming,de.gmd.TentStream,de.gmd,de.dlr.WebDAVClient,de.dlr.tent,de.dlr.TentDataExchange,de.dlr.TentEvent,de.dlr.tent.wrapperbase,de.dlr.tent.simulation,de.dlr.tent.tcci,de.dlr.tent.utils,de.dlr.tent.log,de.dlr.tent.gui,de.dlr"/>
            <property name="ordered" value="false"/>
            <property name="separated" value="true"/>
        </module>
-->

        <!-- Checks for Size Violations.                    -->
        <!-- See http://checkstyle.sf.net/config_sizes.html -->
        <module name="FileLength">
        	<property name="max" value="2000"/>	
		</module>

        <module name="LineLength">
        	<property name="max" value="140"/>
		</module>

        <module name="MethodLength">
            <property name="tokens" value="METHOD_DEF"/>
            <property name="max" value="500"/>
            <property name="countEmpty" value="false"/>
        </module>
        
        <module name="ParameterNumber">
            <property name="max" value="7"/>
            <property name="tokens" value="METHOD_DEF"/>
        </module>

        <!-- Checks for whitespace                               -->
        <!-- See http://checkstyle.sf.net/config_whitespace.html -->
        
        <property name="tabWidth" value="4"/>
        
        <module name="EmptyForIteratorPad"/>
        <module name="MethodParamPad"/>

<!--
        <module name="NoWhitespaceAfter"/>
        <module name="NoWhitespaceBefore"/>
        <module name="OperatorWrap"/>
        <module name="ParenPad"/>
        <module name="TypecastParenPad"/>

        <module name="WhitespaceAfter"/>
-->
        <module name="WhitespaceAround">
        	<property name="tokens" value="ASSIGN,MINUS,PLUS,PLUS_ASSIGN,MINUS_ASSIGN,STAR_ASSIGN,DIV_ASSIGN,QUESTION,LOR,LAND,NOT_EQUAL,EQUAL,LT,GT,LE,GE,LITERAL_ASSERT,LITERAL_CATCH,LITERAL_DO,LITERAL_ELSE,LITERAL_FINALLY,LITERAL_FOR,LITERAL_IF,LITERAL_RETURN,LITERAL_SYNCHRONIZED,LITERAL_TRY,LITERAL_WHILE"/>
		</module>
		
        <module name="TabCharacter"/>


        <!-- Modifier Checks                                    -->
        <!-- See http://checkstyle.sf.net/config_modifiers.html -->

        <module name="ModifierOrder"/>
<!--
        <module name="RedundantModifier"/>
-->

        <!-- Checks for blocks. You know, those {}'s         -->
        <!-- See http://checkstyle.sf.net/config_blocks.html -->

<!--        
        <module name="AvoidNestedBlocks"/>
-->

<!--
        <module name="EmptyBlock"/>
-->
        <module name="LeftCurly"/>
        <module name="NeedBraces"/>
        <module name="RightCurly"/>

        <!-- Checks for common coding problems               -->
        <!-- See http://checkstyle.sf.net/config_coding.html -->
        <module name="AvoidInlineConditionals"/>
        <module name="DoubleCheckedLocking"/>
        <module name="EmptyStatement"/>
        <module name="EqualsHashCode"/>
        <module name="HiddenField"/>
        <module name="InnerAssignment"/>
        
	   	<!-- don't create new instances of Boolean, use Boolean.TRUE/FALSE or Boolean.valueOf() instead -->
    	<module name="IllegalInstantiation">
    		<property name="classes" value="java.lang.Boolean"/>
    	</module>

<!--
        <module name="MagicNumber"/>
-->
        <module name="MissingSwitchDefault"/>
        <module name="ModifiedControlVariable"/>
        <module name="RedundantThrows"/>
<!--        
        <module name="SimplifyBooleanExpression"/>
        <module name="SimplifyBooleanReturn"/>
-->

        <module name="StringLiteralEquality"/>
        
        <module name="NestedIfDepth">
            <property name="max" value="3"/>
        </module>       

        <module name="NestedTryDepth">
            <property name="max" value="3"/>
        </module>
        
        <module name="IllegalCatch">
            <property name="illegalClassNames" value="java.lang.Exception, java.lang.Throwable"/>
        </module>
       
        <module name="ReturnCount">
            <property name="max" value="3"/>
        </module>

        <module name="IllegalType">
        </module>
       
        <module name="DeclarationOrder"/>
       
        <module name="DefaultComesLast"/>

        <module name="MultipleStringLiterals">
            <property name="allowedDuplicates" value="2"/>
            <property name="ignoreStringsRegexp" value='^(("")|(", ")|(" ")|("\\n")||("\)")|("\(")|("Dialog"))$'/>
        </module>

        <module name="MultipleVariableDeclarations"/>

        <!-- Checks for class design                         -->
        <!-- See http://checkstyle.sf.net/config_design.html -->
<!--
        <module name="DesignForExtension"/>
        <module name="FinalClass"/>
-->
        <module name="HideUtilityClassConstructor"/>
        <module name="MutableException"/>

        
<!--
        <module name="InterfaceIsType"/>
        <module name="VisibilityModifier"/>
-->

        <!-- Miscellaneous other checks.                   -->
        <!-- See http://checkstyle.sf.net/config_misc.html -->

        <module name="GenericIllegalRegexp">
            <property name="format" value="e\.printStackTrace"/>
            <property name="message" value="Provide a useful error message (instead of e.printStackTrace())."/>
        </module>

<!--
        <module name="FinalParameters"/>
        <module name="TodoComment"/>
-->

        <module name="UpperEll"/>
        <module name="ArrayTypeStyle"/>

        <module name="Indentation">
            <property name="caseIndent" value="0"/>
        </module>

        <module name="Regexp">
            <property name="format"
                value="\A/\*\n \* [A-Z][a-zA-Z0-9]*\.java\n \*\s*\n"/>
            <property name="message" value="Correct file header not found (1)! Add file header from template."/>
        </module>
        
        <module name="Regexp">
            <property name="format"
                value="^ *(/?\*+|//) *TODO *:? *.*([cC]omment|[aA]uto.?generated)"/>
            <property name="message" value="Straying TODO found. Fill in the automatically generated sections accordingly."/>
        </module>
        
        <!-- Optional Checks -->
<!--    
        <module name="com.puppycrawl.tools.checkstyle.checks.usage.OneMethodPrivateField">
          <property name="ignoreFormat" value="^(logger)|([A-Z][A-Z0-9]*(_[A-Z0-9]+)*)$"/>
        </module>
        <module name="com.puppycrawl.tools.checkstyle.checks.usage.UnusedPrivateField">
		    <property name="ignoreFormat" value="logger"/>
        </module>
-->
    </module>

</module>
