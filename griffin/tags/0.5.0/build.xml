<?xml version="1.0" encoding="utf-8"?>

<project name="griffin" basedir="." default="dist" >
<!--
	<taskdef name="jarbundler" 
	         classname="net.sourceforge.jarbundler.JarBundler" />
-->
    <!-- Give user a chance to override without editing this file 
      (and without typing -D each time it compiles it) -->
    <property file="build.properties" />

	<property name="application" value="griffin"/>
	<property name="app.version" value="0.5.0"/>
	<property name="lib" value="lib"/>
    <property name="src" value="src/main/java"/>
    <property name="resources" value="src/main/resources"/>
    <property name="dist" value="dist"/>
    <property name="classes" value="classes"/>
    <property name="release" value="release"/>
    <property name="debug" value="on"/>
	<property name="mainclass" value="au.org.arcs.griffin.FtpServerStarter"/>
	<property name="keystore" value="keystore.ks"/>
	<property name="package" value="package"/>
	<property name="bin" value="bin"/>
	
    <fileset id="lib.files" dir="${lib}">
        <include name="*.jar"/>
    </fileset>

    <!-- build the ant tasks that we need and install them into the correct directory -->
    <target name="prepare">
        <tstamp/>
        <mkdir dir="${classes}"/>
        <mkdir dir="${dist}"/>
    </target>

    <target name="compile" depends="prepare">
        <javac destdir="${classes}" srcdir="${src}" debug="${debug}" includeAntRuntime="false" source="1.5" target="1.5">
            <classpath>
                <fileset refid="lib.files"/>
          </classpath>
        </javac>
    	<copy todir="${classes}">
    	    <fileset dir="${resources}">
    	      <include name="**/*.config"/>
      	      <include name="**/*.properties"/>
    	    </fileset>
    	  </copy>
    </target>

    <target name="jar" depends="clean, compile">
        <jar jarfile="${dist}/${application}.jar">
            <fileset dir="${classes}"/>
        </jar>
    </target>
	
	<target name="merge-for-jargon" depends="jar">
		<jar jarfile="${dist}/${application}_full.jar">  
<!--		  <fileset dir="classes" includes="**/*.class" />    manifest="src/MANIFEST.MF"-->
			<zipfileset src="${dist}/${application}.jar" />  
			<zipfileset src="${lib}/bcprov-jdk15-140.jar" includes="**/*.class"/>  
			<zipfileset src="${lib}/cog-jglobus-1.8.0.jar" excludes="META-INF/*"/>  
			<zipfileset src="${lib}/commons-codec-1.3.jar" includes="**/*.class"/>  
			<zipfileset src="${lib}/commons-io-1.4.jar" includes="**/*.class"/>  
			<zipfileset src="${lib}/commons-lang-2.3.jar" includes="**/*.class"/>  
			<zipfileset src="${lib}/commons-logging-1.1.1.jar" includes="**/*.class"/>  
			<zipfileset src="${lib}/cryptix-asn1.jar" excludes="META-INF/*"/>  
			<zipfileset src="${lib}/cryptix.jar" excludes="META-INF/*"/>  
			<zipfileset src="${lib}/cryptix32.jar" excludes="META-INF/*"/>  
			<zipfileset src="${lib}/dom4j-1.6.1.jar" includes="**/*.class"/>  
			<zipfileset src="${lib}/jargon.jar" includes="**/*.class"/>  
			<zipfileset src="${lib}/jaxen-1.1.jar" includes="**/*.class"/>  
			<zipfileset src="${lib}/log4j-1.2.15.jar" includes="**/*.class"/>  
			<zipfileset src="${lib}/puretls.jar" includes="**/*.class"/>  
			<zipfileset src="${lib}/spring-beans-2.0.6.jar" excludes="META-INF/*"/>  
			<zipfileset src="${lib}/spring-context-2.0.6.jar" excludes="META-INF/*"/>  
			<zipfileset src="${lib}/spring-core-2.0.6.jar" excludes="META-INF/*"/>  
			<manifest>
			  <attribute name="Main-Class" value="${mainclass}"/>
			</manifest>
		</jar> 
	</target>
	
	<target name="package-jargon" depends="merge-for-jargon">
		<!--		<mkdir dir="${package}/${application}-${app.version}-jargon"/>
		<copy file="${bin}/install.sh" todir="${package}/${application}-${app.version}-jargon"/>
		<copy file="${bin}/${application}" todir="${package}/${application}-${app.version}-jargon"/>
		<copy file="${dist}/${application}_jargon.jar" todir="${package}/${application}-${app.version}-jargon"/>
		<copy file="${resources}/log4j.properties" todir="${package}/${application}-${app.version}-jargon"/>
		<copy file="${resources}/griffin-ctx.xml" todir="${package}/${application}-${app.version}-jargon"/>
		<chmod file="${bin}/install.sh" perm="+x"/>
		<chmod file="${bin}/${application}" perm="+x"/> -->
		<tar destfile="${dist}/${application}-${app.version}-jargon.tar.gz" compression="gzip">
			<tarfileset dir="${dist}" prefix="${application}-${app.version}-jargon/">
			    <include name="${application}_full.jar"/>
			</tarfileset>
			<tarfileset dir="${resources}" prefix="${application}-${app.version}-jargon/">
			    <include name="log4j.properties"/>
			    <include name="griffin-ctx.xml"/>
			</tarfileset>
			<tarfileset dir="${bin}" filemode="755" prefix="${application}-${app.version}-jargon/">
			    <include name="${application}"/>
			    <include name="install.sh"/>
			</tarfileset>
		</tar>
<!--		<gzip zipfile="${dist}/${application}-${app.version}.tar.gz" src="${dist}/${application}-${app.version}.tar"/>
		<delete file="${dist}/${application}-${app.version}.tar"/>
		<delete dir="${package}"/> -->
	</target>
	
    <target name="sign-merge" depends="merge-for-jargon">
    	<echo level="info">Signing ONE MERGED JAR...</echo>
		<signjar jar="${dist}/${application}_full.jar" keystore="${keystore}" alias="myalias" storepass="myalias"/>   
<!--	<copy file="${dist}/${application}_obf.jar" tofile="jws/${application}.jar"/> -->
    </target>    

    <target name="javadoc">
        <mkdir dir="${docs}"/>
        <javadoc sourcepath="${src}"
                 access="public"
                 windowtitle="rendezvous"
                 doctitle="rendezvous"
                 header="rendezvous"
                 destdir="${docs}">
            <classpath>
                <fileset refid="lib.files"/>
                <fileset refid="common.files"/>
                <fileset refid="netcommon.files"/>
        		<fileset refid="login.files"/>
                <pathelement location="${tjar}"/>
            </classpath>
            <group title="Examples" packages="tutorial.*"/>
            <package name="tutorial"/>
        </javadoc>
    </target>

    <target name="clean" description="Removes all files produced by build">
        <delete dir="${classes}"/>
        <delete dir="${dist}"/>
        <delete dir="${doc}"/>
    </target>
    
   <!-- meta targets -->
  
  <target name="all" depends="clean, sign-merge" description="Clean build of core targets" />

  <target name="dist" depends="clean, merge-for-jargon" description="Clean build of all dist targets"/>
    
</project>
