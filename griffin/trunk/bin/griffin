#!/bin/bash  

### BEGIN INIT INFO
# Provides:          griffin
# Required-Start:    $network $local_fs $remote_fs $mongodb
# Required-Stop:     $network $local_fs $remote_fs $mongodb
# Should-Start:      $named $time mongodb
# Should-Stop:       
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Griffin GridFTP server
# Description:       Griffin is a GridFTP interface for arbitrary data sources.
### END INIT INFO

# Startup script for app under *nix systems (it works under NT/cygwin too).
#
# Configuration files
#
# /etc/default/app
#   If it exists, this is read at the start of script. It may perform any 
#   sequence of shell commands, like setting relevant environment variables.
#
# $HOME/.apprc
#   If it exists, this is read at the start of script. It may perform any 
#   sequence of shell commands, like setting relevant environment variables.
#
# /etc/app.conf
#   If found, and no configurations were given on the command line,
#   the file will be used as this script's configuration. 
#   Each line in the file may contain:
#     - A comment denoted by the pound (#) sign as first non-blank character.
#     - The path to a regular file, which will be passed to app as a 
#       config.xml file.
#     - The path to a directory. Each *.xml file in the directory will be
#       passed to app as a config.xml file.
#
#   The files will be checked for existence before being passed to app.
#
# $APP_HOME/etc/app.xml
#   If found, used as this script's configuration file, but only if
#   /etc/app.conf was not present. See above.
#   
# Configuration variables
#
# JAVA_HOME  
#   Home of Java installation. 
#
# JAVA
#   Command to invoke Java. If not set, $JAVA_HOME/bin/java will be
#   used.
#
# JAVA_OPTIONS
#   Extra options to pass to the JVM
#
# APP_HOME
#   Where App is installed. If not set, the script will try go
#   guess it by first looking at the invocation path for the script,
#   and then by looking in standard locations as $HOME/opt/app
#   and /opt/app. The java system property "app.home" will be
#   set to this value for use by configure.xml files, f.e.:
#
#    <Arg><SystemProperty name="app.home" default="."/>/webapps/app.war</Arg>
#
# APP_PORT
#   Override the default port for App servers. If not set then the
#   default value in the xml configuration file will be used. The java
#   system property "app.port" will be set to this value for use in
#   configure.xml files. For example, the following idiom is widely
#   used in the demo config files to respect this property in Listener
#   configuration elements:
#
#    <Set name="Port"><SystemProperty name="app.port" default="8080"/></Set>
#
#   Note: that the config file could ignore this property simply by saying:
#
#    <Set name="Port">8080</Set>
#
# APP_RUN
#   Where the app.pid file should be stored. It defaults to the
#   first available of /var/run, /usr/var/run, and /tmp if not set.
#  
# APP_PID
#   The App PID file, defaults to $APP_RUN/app.pid
#   
# APP_ARGS
#   The default arguments to pass to app.
#
# APP_USER
#   if set, then used as a username to run the server as
#
# chkconfig: 35 99 01
# description: Starts/Stops App

usage()
{
    echo "Usage: $0 {start|stop|run|restart|check|supervise} [ CONFIGS ... ] "
    exit 1
}

[ $# -gt 0 ] || usage


##################################################
# Some utility functions
##################################################
findDirectory()
{
    OP=$1
    shift
    for L in $* ; do
        [ $OP $L ] || continue 
        echo $L
        break
    done 
}

running()
{
    [ -f $1 ] || return 1
    PID=$(cat $1)
    ps -p $PID >/dev/null 2>/dev/null || return 1
    return 0
}







##################################################
# Get the action & configs
##################################################

ACTION=$1
shift
ARGS="$*"
CONFIGS=""
NO_START=0

##################################################
# See if there's a default configuration file
##################################################
if [ -f /etc/default/griffin ] ; then 
  . /etc/default/griffin
fi


##################################################
# See if there's a user-specific configuration file
##################################################
#if [ -f $HOME/.apprc ] ; then 
#  . $HOME/.apprc
#fi

##################################################
# Set tmp if not already set.
##################################################

if [ -z "$TMP" ] 
then
  TMP=/tmp
fi

##################################################
# App's hallmark
##################################################
APP_INSTALL_TRACE_FILE="etc/app.xml"
TMPJ=$TMP/j$$


##################################################
# Try to determine APP_HOME if not set
##################################################
#if [ -z "$APP_HOME" ] 
#then
#  APP_HOME_1=`dirname "$0"`
#  APP_HOME_1=`dirname "$APP_HOME_1"`
#  if [ -f "${APP_HOME_1}/${APP_INSTALL_TRACE_FILE}" ] ; 
#  then 
#     APP_HOME=${APP_HOME_1} 
#  fi
#fi


##################################################
# if no APP_HOME, search likely locations.
##################################################
#if [ "$APP_HOME" = "" ] ; then
#  STANDARD_LOCATIONS="           \
#        /usr/share               \
#        /usr/share/java          \
#        $HOME                    \
#        $HOME/src                \
#        ${HOME}/opt/             \
#        /opt                     \
#        /java                    \
#        /usr/local               \
#        /usr/local/share         \
#        /usr/local/share/java    \
#        /home                    \
#        "
#  APP_DIR_NAMES="              \
#        app-6                  \
#        app6                   \
#        app-6.*                \
#        app                    \
#        App-6                  \
#        App6                   \
#        App-6.*                \
#        App                    \
#        "
#        
#  APP_HOME=
#  for L in $STANDARD_LOCATIONS 
#  do
#     for N in $APP_DIR_NAMES 
#     do
#         if [ -d $L/$N ] && [ -f "$L/${N}/${APP_INSTALL_TRACE_FILE}" ] ; 
#         then 
#            APP_HOME="$L/$N"
#         fi
#     done
#     [ ! -z "$APP_HOME" ] && break
#  done
#fi


##################################################
# No APP_HOME yet? We're out of luck!
##################################################
#if [ -z "$APP_HOME" ] ; then
#    echo "** ERROR: APP_HOME not set, you need to set it or install in a standard location" 
#    exit 1
#fi
#
#cd $APP_HOME
#APP_HOME=`pwd`


#####################################################
# Check that app is where we think it is
#####################################################
#if [ ! -r $APP_HOME/$APP_INSTALL_TRACE_FILE ] 
#then
#   echo "** ERROR: Oops! App doesn't appear to be installed in $APP_HOME"
#   echo "** ERROR:  $APP_HOME/$APP_INSTALL_TRACE_FILE is not readable!"
#   exit 1
#fi


###########################################################
# Get the list of config.xml files from the command line.
###########################################################
#if [ ! -z "$ARGS" ] 
#then
#  for A in $ARGS 
#  do
#    if [ -f $A ] 
#    then
#       CONF="$A" 
#    elif [ -f $APP_HOME/etc/$A ] 
#    then
#       CONF="$APP_HOME/etc/$A" 
#    elif [ -f ${A}.xml ] 
#    then
#       CONF="${A}.xml" 
#    elif [ -f $APP_HOME/etc/${A}.xml ] 
#    then
#       CONF="$APP_HOME/etc/${A}.xml" 
#    else
#       echo "** ERROR: Cannot find configuration '$A' specified in the command line." 
#       exit 1
#    fi
#    if [ ! -r $CONF ] 
#    then
#       echo "** ERROR: Cannot read configuration '$A' specified in the command line." 
#       exit 1
#    fi
#    CONFIGS="$CONFIGS $CONF"
#  done
#fi


##################################################
# Try to find this script's configuration file,
# but only if no configurations were given on the
# command line.
##################################################
#if [ -z "$APP_CONF" ] 
#then
#  if [ -f /etc/app.conf ]
#  then
#     APP_CONF=/etc/app.conf
#  elif [ -f "${APP_HOME}/etc/app.conf" ]
#  then
#     APP_CONF="${APP_HOME}/etc/app.conf"
#  fi
#fi

##################################################
# Read the configuration file if one exists
##################################################
#CONFIG_LINES=
#if [ -z "$CONFIGS" ] && [ -f "$APP_CONF" ] && [ -r "$APP_CONF" ] 
#then
#  CONFIG_LINES=`cat $APP_CONF | grep -v "^[:space:]*#" | tr "\n" " "` 
#fi

##################################################
# Get the list of config.xml files from app.conf
##################################################
#if [ ! -z "${CONFIG_LINES}" ] 
#then
#  for CONF in ${CONFIG_LINES} 
#  do
#    if [ ! -r "$CONF" ] 
#    then
#      echo "** WARNING: Cannot read '$CONF' specified in '$APP_CONF'" 
#    elif [ -f "$CONF" ] 
#    then
#      # assume it's a configure.xml file
#      CONFIGS="$CONFIGS $CONF" 
#    elif [ -d "$CONF" ] 
#    then
#      # assume it's a directory with configure.xml files
#      # for example: /etc/app.d/
#      # sort the files before adding them to the list of CONFIGS
#      XML_FILES=`ls ${CONF}/*.xml | sort | tr "\n" " "` 
#      for FILE in ${XML_FILES} 
#      do
#         if [ -r "$FILE" ] && [ -f "$FILE" ] 
#         then
#            CONFIGS="$CONFIGS $FILE" 
#         else
#           echo "** WARNING: Cannot read '$FILE' specified in '$APP_CONF'" 
#         fi
#      done
#    else
#      echo "** WARNING: Don''t know what to do with '$CONF' specified in '$APP_CONF'" 
#    fi
#  done
#fi

#####################################################
# Run the standard server if there's nothing else to run
#####################################################
#if [ -z "$CONFIGS" ] 
#then
#    CONFIGS="${APP_HOME}/etc/app-logging.xml ${APP_HOME}/etc/app.xml"
#fi


#####################################################
# Find a location for the pid file
#####################################################
if [  -z "$APP_RUN" ] 
then
  APP_RUN=`findDirectory -w /var/run /usr/var/run /tmp`
fi

#####################################################
# Find a PID for the pid file
#####################################################
if [  -z "$APP_PID" ] 
then
  APP_PID="$APP_RUN/app.pid"
fi


##################################################
# Check for JAVA_HOME
##################################################
if [ -z "$JAVA_HOME" ]
then
    # If a java runtime is not defined, search the following
    # directories for a JVM and sort by version. Use the highest
    # version number.

    # Java search path
    JAVA_LOCATIONS="\
        /usr/java \
        /usr/bin \
        /usr/local/bin \
        /usr/local/java \
        /usr/local/jdk \
        /usr/local/jre \
	/usr/lib/jvm \
        /opt/java \
        /opt/jdk \
        /opt/jre \
    " 
    JAVA_NAMES="java jdk jre"
    for N in $JAVA_NAMES ; do
        for L in $JAVA_LOCATIONS ; do
            [ -d $L ] || continue 
            find $L -name "$N" ! -type d | grep -v threads | while read J ; do
                [ -x $J ] || continue
                VERSION=`eval $J -version 2>&1`       
                [ $? = 0 ] || continue
                VERSION=`expr "$VERSION" : '.*"\(1.[0-9\.]*\)["_]'`
                [ "$VERSION" = "" ] && continue
                expr $VERSION \< 1.2 >/dev/null && continue
                echo $VERSION:$J
            done
        done
    done | sort | tail -1 > $TMPJ
    JAVA=`cat $TMPJ | cut -d: -f2`
    JVERSION=`cat $TMPJ | cut -d: -f1`

    JAVA_HOME=`dirname $JAVA`
    while [ ! -z "$JAVA_HOME" -a "$JAVA_HOME" != "/" -a ! -f "$JAVA_HOME/lib/tools.jar" ] ; do
        JAVA_HOME=`dirname $JAVA_HOME`
    done
    [ "$JAVA_HOME" = "" ] && JAVA_HOME=

    echo "Found JAVA=$JAVA in JAVA_HOME=$JAVA_HOME"
fi


##################################################
# Determine which JVM of version >1.2
# Try to use JAVA_HOME
##################################################
if [ "$JAVA" = "" -a "$JAVA_HOME" != "" ]
then
  if [ ! -z "$JAVACMD" ] 
  then
     JAVA="$JAVACMD" 
  else
    [ -x $JAVA_HOME/bin/jre -a ! -d $JAVA_HOME/bin/jre ] && JAVA=$JAVA_HOME/bin/jre
    [ -x $JAVA_HOME/bin/java -a ! -d $JAVA_HOME/bin/java ] && JAVA=$JAVA_HOME/bin/java
  fi
fi

if [ "$JAVA" = "" ]
then
    echo "Cannot find a JRE or JDK. Please set JAVA_HOME to a >=1.2 JRE" 2>&2
    exit 1
fi

JAVA_VERSION=`expr "$($JAVA -version 2>&1 | head -1)" : '.*1\.\([0-9]\)'`

#####################################################
# See if APP_PORT is defined
#####################################################
#if [ "$APP_PORT" != "" ] 
#then
#  JAVA_OPTIONS="$JAVA_OPTIONS -Dapp.port=$APP_PORT"
#fi

#####################################################
# See if APP_LOGS is defined
#####################################################
#if [ "$APP_LOGS" != "" ]
#then
#  JAVA_OPTIONS="$JAVA_OPTIONS -Dapp.logs=$APP_LOGS"
#fi

#####################################################
# Are we running on Windows? Could be, with Cygwin/NT.
#####################################################
case "`uname`" in
CYGWIN*) PATH_SEPARATOR=";";;
*) PATH_SEPARATOR=":";;
esac


#####################################################
# Add app properties to Java VM options.
#####################################################
#JAVA_OPTIONS="$JAVA_OPTIONS -Dapp.home=$APP_HOME -Djava.io.tmpdir=$TMP"

#[ -f $APP_HOME/etc/start.config ] && JAVA_OPTIONS="-DSTART=$APP_HOME/etc/start.config $JAVA_OPTIONS"

#####################################################
# This is how the App server will be started
#####################################################

APP_START=$APP_HOME/griffin.jar
APP_ARGS=$APP_HOME/griffin-ctx.xml

RUN_ARGS="$JAVA_OPTIONS -jar $APP_START $APP_ARGS $CONFIGS"
RUN_CMD="$JAVA $RUN_ARGS"

#####################################################
# Comment these out after you're happy with what 
# the script is doing.
#####################################################
#echo "APP_HOME     =  $APP_HOME"
#echo "APP_PID      =  $APP_PID"
#echo "APP_ARGS     =  $APP_ARGS"
#echo "JAVA_OPTIONS   =  $JAVA_OPTIONS"
#echo "JAVA           =  $JAVA"
#echo "RUN_ARGS       =  $RUN_ARGS"

##echo "APP_CONF     =  $APP_CONF"
##echo "APP_RUN      =  $APP_RUN"
##echo "CONFIGS        =  $CONFIGS"

##################################################
# Do the action
##################################################
case "$ACTION" in
  start)
        echo -n "Starting App: "

        if [ "$NO_START" = "1" ]; then 
	  echo "Not starting app - NO_START=1 in /etc/default/griffin";
          exit 0;
	fi

	if type start-stop-daemon > /dev/null 2>&1 
	then
          [ x$APP_USER = x ] && APP_USER=$(whoami)
	  [ $UID = 0 ] && CH_USER="-c $APP_USER"
	  if start-stop-daemon -S -p$APP_PID $CH_USER -d $APP_HOME -b -m -a $JAVA -- $RUN_ARGS 
	  then
	      sleep 1
              echo "APP_PID $APP_PID"
	      if running $APP_PID
	      then
                  echo OK
              else
                  echo FAILED
              fi
	  fi

	else

          if [ -f $APP_PID ]
          then            
            if running $APP_PID
            then
              echo "Already Running!!"
              exit 1
            else
              # dead pid file - remove
              rm -f $APP_PID
            fi
          fi

          if [ x$APP_USER != x ] 
          then
              touch $APP_PID
              chown $APP_USER $APP_PID
              su - $APP_USER -c "
                $RUN_CMD &
                PID=\$!
                disown \$PID
                echo \$PID > $APP_PID"
          else
              $RUN_CMD &
              PID=$!
              disown $PID
              echo $PID > $APP_PID
          fi

          echo "STARTED App `date`" 
        fi

        ;;

  stop)
        echo -n "Stopping App: "
	if type start-stop-daemon > /dev/null 2>&1; then
	  start-stop-daemon -K -p $APP_PID -d $APP_HOME -a $JAVA -s HUP 
	  sleep 1
	  if running $APP_PID
	  then
	      sleep 3
	      if running $APP_PID
	      then
		  sleep 30
	          if running $APP_PID
	          then
	             start-stop-daemon -K -p $APP_PID -d $APP_HOME -a $JAVA -s KILL
		  fi
              fi
	  fi

	  rm -f $APP_PID
          echo OK
	else
	  PID=`cat $APP_PID 2>/dev/null`
          TIMEOUT=30
          while running $APP_PID && [ $TIMEOUT -gt 0 ]
          do
            kill $PID 2>/dev/null
            sleep 1
            let TIMEOUT=$TIMEOUT-1
          done
          
          [ $TIMEOUT -gt 0 ] || kill -9 $PID 2>/dev/null

	  rm -f $APP_PID
          echo OK
	fi
        ;;

  restart)
        APP_SH=$0
        if [ ! -f $APP_SH ]; then
          if [ ! -f $APP_HOME/bin/app.sh ]; then
            echo "$APP_HOME/bin/app.sh does not exist."
            exit 1
          fi
          APP_SH=$APP_HOME/bin/app.sh
        fi
        $APP_SH stop $*
        sleep 10
        $APP_SH start $*
        ;;

  supervise)
       #
       # Under control of daemontools supervise monitor which
       # handles restarts and shutdowns via the svc program.
       #
         exec $RUN_CMD
         ;;

  run|demo)
        echo "Running App: "

        if [ -f $APP_PID ]
        then
            if running $APP_PID
            then
              echo "Already Running!!"
              exit 1
            else
              # dead pid file - remove
              rm -f $APP_PID
            fi
        fi

        exec $RUN_CMD
        ;;

  check)
        echo "Checking arguments to App: "
        echo "APP_HOME     =  $APP_HOME"
        echo "APP_CONF     =  $APP_CONF"
        echo "APP_RUN      =  $APP_RUN"
        echo "APP_PID      =  $APP_PID"
        echo "APP_PORT     =  $APP_PORT"
        echo "APP_LOGS     =  $APP_LOGS"
        echo "CONFIGS        =  $CONFIGS"
        echo "JAVA_OPTIONS   =  $JAVA_OPTIONS"
        echo "JAVA           =  $JAVA"
        echo "CLASSPATH      =  $CLASSPATH"
        echo "RUN_CMD        =  $RUN_CMD"
        echo
        
        if [ -f $APP_RUN/app.pid ]
        then
            echo "App running pid="`cat $APP_RUN/app.pid`
            exit 0
        fi
        exit 1
        ;;

*)
        usage
	;;
esac

exit 0



