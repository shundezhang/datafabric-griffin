==========================
Testing for MongoDB/GridFS
==========================

The tests in this file exercise the GridFTP server using the globus-url-copy
client for GridFTP transactions against the local machine.  Some entries are
checked against the locally running MongoDB/GridFS using the mongofiles
command line tool.

Make sure that the configuration in test_config.py is set appropriately!

The following line is some bootstrapping. It must be kept here.

    >>> from acceptance_testing import execute
    >>> import os
    >>> import tempfile
    >>> LOCAL_FILE = os.path.join(os.getcwd(), 'test_config.py')


Testing commands and simple operations
======================================

list entries under /test/
-------------------------

Checks the listing of the sub directory "/test"

    >>> result = execute('globus-url-copy -list gsiftp://%(host)s/test/')
    >>> print result
    ...     # doctest: +ELLIPSIS
    ...     # doctest: +NORMALIZE_WHITESPACE
    gsiftp://.../test/
    ...
    >>> 'test_config.py' in result
    True


list empty directory
--------------------

Checks the listing of the sub directory "/playground"

    >>> result = execute('globus-url-copy -list gsiftp://%(host)s/playground/')
    >>> print result
    ...     # doctest: +ELLIPSIS
    ...     # doctest: +NORMALIZE_WHITESPACE
    gsiftp://.../playground/
    <BLANKLINE>
    <BLANKLINE>


upload a file
-------------

Copies the local file test_config.py to /spam/test_config.py on the
server.

    >>> result = execute('globus-url-copy file://' + LOCAL_FILE 
    ...                  + ' gsiftp://%(host)s/spam/test_config.py')
    >>> print result
    ...     # doctest: +ELLIPSIS
    ...     # doctest: +NORMALIZE_WHITESPACE
    <BLANKLINE>
    >>> result = execute('mongofiles list')
    >>> '/spam/test_config.py' in result
    True


upload a file (yet again)
-------------------------

Uploads a file again.

    >>> result = execute('globus-url-copy file://' + LOCAL_FILE 
    ...                  + ' gsiftp://%(host)s/spam/test_config.py')
    >>> print result
    ...     # doctest: +ELLIPSIS
    ...     # doctest: +NORMALIZE_WHITESPACE
    <BLANKLINE>
    >>> result = execute('mongofiles list')
    >>> '/spam/test_config.py' in result
    True
    
    
retrieve a file
---------------

Retrieves the previously uploaded file /spam/test_config.py to the
local host. The local file is verified and removed again.

    >>> dummy, filename = tempfile.mkstemp()
    >>> result = execute('globus-url-copy gsiftp://%(host)s/spam/test_config.py '
    ...                  + 'file://' + filename)
    >>> print result
    ...     # doctest: +ELLIPSIS
    ...     # doctest: +NORMALIZE_WHITESPACE
    <BLANKLINE>
    >>> open(filename).read() == open(LOCAL_FILE).read()
    True
    >>> # Delete file again.
    >>> result = execute('mongofiles delete /spam/test_config.py')
    >>> 'done!' in result
    True
    >>> os.remove(filename)


failing retrieval of non-existent file
--------------------------------------

Tries to retrieve a non-existing file /spam/foo.py to the local host.

    >>> dummy, filename = tempfile.mkstemp()
    >>> result = execute('globus-url-copy gsiftp://%(host)s/spam/foo.py '
    ...                  + 'file://' + filename)
    >>> print result
    ...     # doctest: +ELLIPSIS
    ...     # doctest: +NORMALIZE_WHITESPACE
    <BLANKLINE>
    error: globus_ftp_client: the server responded with an error
    550 Requested action not taken. Path unavailable (e.g., path not found, no access).
    <BLANKLINE>
    <BLANKLINE>
    >>> os.remove(filename)


try to upload to a read-only place
----------------------------------

Tries to upload a file to a place without write privileges.

    >>> result = execute('globus-url-copy file://' + LOCAL_FILE 
    ...                  + ' gsiftp://%(host)s/readonly/test_config.py')
    >>> print result
    ...     # doctest: +ELLIPSIS
    ...     # doctest: +NORMALIZE_WHITESPACE
    <BLANKLINE>
    ...
    550 Requested action not taken. No write permission.
    <BLANKLINE>
    <BLANKLINE>


retrieve a read-only file
-------------------------

Retrieves the read-only file.

    >>> dummy, filename = tempfile.mkstemp()
    >>> result = execute('globus-url-copy gsiftp://%(host)s/readonly/no_paint.txt '
    ...                  + 'file://' + filename)
    >>> print result
    ...     # doctest: +ELLIPSIS
    ...     # doctest: +NORMALIZE_WHITESPACE
    <BLANKLINE>
    >>> '#!/usr/bin/env python' in open(filename).read()
    True
    >>> os.remove(filename)
